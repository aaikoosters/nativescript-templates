import { ElementRef, Injectable, Optional } from '@angular/core';
import { Page, ViewBase } from '@nativescript/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@nativescript/core";
export class PageService {
    get inPage() {
        return this._inPage$.value;
    }
    get inPage$() {
        return this._inPage$.pipe(distinctUntilChanged());
    }
    get pageEvents$() {
        return this._pageEvents$.asObservable();
    }
    constructor(page, elRef, view) {
        this._pageEvents$ = new Subject();
        if (page) {
            this.page = page;
        }
        else {
            view = view || elRef.nativeElement;
            while (view) {
                if (view instanceof Page) {
                    this.page = view;
                    break;
                }
                view = view.parent;
            }
        }
        this._inPage$ = new BehaviorSubject(!!this.page?.isLoaded);
        if (this.page) {
            this.page.on('navigatedFrom', this.pageEvent, this);
            this.page.on('navigatedTo', this.pageEvent, this);
            this.page.on('navigatingFrom', this.pageEvent, this);
            this.page.on('navigatingTo', this.pageEvent, this);
        }
    }
    ngOnDestroy() {
        if (this.page) {
            this.page.off('navigatedFrom', this.pageEvent, this);
            this.page.off('navigatedTo', this.pageEvent, this);
            this.page.off('navigatingFrom', this.pageEvent, this);
            this.page.off('navigatingTo', this.pageEvent, this);
        }
        this._inPage$.complete();
        this._pageEvents$.complete();
    }
    pageEvent(evt) {
        this._pageEvents$.next(evt);
        switch (evt.eventName) {
            case 'navigatedTo':
                this._inPage$.next(true);
                break;
            case 'navigatedFrom':
                this._inPage$.next(false);
                break;
            default:
        }
    }
}
PageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: PageService, deps: [{ token: i1.Page, optional: true }, { token: i0.ElementRef, optional: true }, { token: i1.ViewBase, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: PageService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: PageService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Page, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Optional
                }] }, { type: i1.ViewBase, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL2Nkay9mcmFtZS1wYWdlL3BhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFVLFVBQVUsRUFBYSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFpQixJQUFJLEVBQVEsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekUsT0FBTyxFQUFFLGVBQWUsRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUd0RCxNQUFNLE9BQU8sV0FBVztJQUt0QixJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFDRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0QsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFDRCxZQUF3QixJQUFXLEVBQWMsS0FBNEIsRUFBYyxJQUFlO1FBWGxHLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQWlCLENBQUM7UUFZbEQsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNsQjthQUFNO1lBQ0wsSUFBSSxHQUFHLElBQUksSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDO1lBQ25DLE9BQU8sSUFBSSxFQUFFO2dCQUNYLElBQUksSUFBSSxZQUFZLElBQUksRUFBRTtvQkFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7b0JBQ2pCLE1BQU07aUJBQ1A7Z0JBQ0QsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDcEI7U0FDRjtRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxlQUFlLENBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDcEUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNyRDtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU8sU0FBUyxDQUFDLEdBQWtCO1FBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLFFBQVEsR0FBRyxDQUFDLFNBQVMsRUFBRTtZQUNyQixLQUFLLGFBQWE7Z0JBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN6QixNQUFNO1lBQ1IsS0FBSyxlQUFlO2dCQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDMUIsTUFBTTtZQUNSLFFBQVE7U0FDVDtJQUNILENBQUM7O3dHQTFEVSxXQUFXOzRHQUFYLFdBQVc7MkZBQVgsV0FBVztrQkFEdkIsVUFBVTs7MEJBZUksUUFBUTs7MEJBQWlCLFFBQVE7OzBCQUFrQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBPbkRlc3Ryb3ksIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYXZpZ2F0ZWREYXRhLCBQYWdlLCBWaWV3LCBWaWV3QmFzZSB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFnZVNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwYWdlOiBQYWdlO1xuICBwcml2YXRlIF9pblBhZ2UkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj47XG4gIHByaXZhdGUgX3BhZ2VFdmVudHMkID0gbmV3IFN1YmplY3Q8TmF2aWdhdGVkRGF0YT4oKTtcblxuICBnZXQgaW5QYWdlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pblBhZ2UkLnZhbHVlO1xuICB9XG4gIGdldCBpblBhZ2UkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLl9pblBhZ2UkLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cbiAgZ2V0IHBhZ2VFdmVudHMkKCk6IE9ic2VydmFibGU8TmF2aWdhdGVkRGF0YT4ge1xuICAgIHJldHVybiB0aGlzLl9wYWdlRXZlbnRzJC5hc09ic2VydmFibGUoKTtcbiAgfVxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwYWdlPzogUGFnZSwgQE9wdGlvbmFsKCkgZWxSZWY/OiBFbGVtZW50UmVmPFZpZXdCYXNlPiwgQE9wdGlvbmFsKCkgdmlldz86IFZpZXdCYXNlKSB7XG4gICAgaWYgKHBhZ2UpIHtcbiAgICAgIHRoaXMucGFnZSA9IHBhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXcgPSB2aWV3IHx8IGVsUmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICB3aGlsZSAodmlldykge1xuICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIFBhZ2UpIHtcbiAgICAgICAgICB0aGlzLnBhZ2UgPSB2aWV3O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZpZXcgPSB2aWV3LnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5faW5QYWdlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oISF0aGlzLnBhZ2U/LmlzTG9hZGVkKTtcbiAgICBpZiAodGhpcy5wYWdlKSB7XG4gICAgICB0aGlzLnBhZ2Uub24oJ25hdmlnYXRlZEZyb20nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgICB0aGlzLnBhZ2Uub24oJ25hdmlnYXRlZFRvJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgICAgdGhpcy5wYWdlLm9uKCduYXZpZ2F0aW5nRnJvbScsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICAgIHRoaXMucGFnZS5vbignbmF2aWdhdGluZ1RvJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnBhZ2UpIHtcbiAgICAgIHRoaXMucGFnZS5vZmYoJ25hdmlnYXRlZEZyb20nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgICB0aGlzLnBhZ2Uub2ZmKCduYXZpZ2F0ZWRUbycsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICAgIHRoaXMucGFnZS5vZmYoJ25hdmlnYXRpbmdGcm9tJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgICAgdGhpcy5wYWdlLm9mZignbmF2aWdhdGluZ1RvJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLl9pblBhZ2UkLmNvbXBsZXRlKCk7XG4gICAgdGhpcy5fcGFnZUV2ZW50cyQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgcGFnZUV2ZW50KGV2dDogTmF2aWdhdGVkRGF0YSkge1xuICAgIHRoaXMuX3BhZ2VFdmVudHMkLm5leHQoZXZ0KTtcbiAgICBzd2l0Y2ggKGV2dC5ldmVudE5hbWUpIHtcbiAgICAgIGNhc2UgJ25hdmlnYXRlZFRvJzpcbiAgICAgICAgdGhpcy5faW5QYWdlJC5uZXh0KHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ25hdmlnYXRlZEZyb20nOlxuICAgICAgICB0aGlzLl9pblBhZ2UkLm5leHQoZmFsc2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG59XG4iXX0=