import { NSLocationStrategy } from './ns-location-strategy';
import { PlatformLocation } from '@angular/common';
import { Injectable } from '@angular/core';
import { NativeScriptDebug } from '../../trace';
import * as i0 from "@angular/core";
import * as i1 from "./ns-location-strategy";
export class NativescriptPlatformLocation extends PlatformLocation {
    constructor(locationStrategy) {
        super();
        this.locationStrategy = locationStrategy;
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog('NativescriptPlatformLocation.constructor()');
        }
    }
    getState() {
        return undefined;
    }
    getBaseHrefFromDOM() {
        return '/';
    }
    onPopState(fn) {
        this.locationStrategy.onPopState(fn);
        return () => {
            //
        };
    }
    onHashChange(_fn) {
        return () => {
            //
        };
    }
    get search() {
        return '';
    }
    get hash() {
        return '';
    }
    get pathname() {
        return this.locationStrategy.path();
    }
    set pathname(_newPath) {
        throw new Error('NativescriptPlatformLocation set pathname - not implemented');
    }
    pushState(state, title, url) {
        this.locationStrategy.pushState(state, title, url, null);
    }
    replaceState(state, title, url) {
        this.locationStrategy.replaceState(state, title, url, null);
    }
    forward() {
        throw new Error('NativescriptPlatformLocation.forward() - not implemented');
    }
    back() {
        this.locationStrategy.back();
    }
}
NativescriptPlatformLocation.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NativescriptPlatformLocation, deps: [{ token: i1.NSLocationStrategy }], target: i0.ɵɵFactoryTarget.Injectable });
NativescriptPlatformLocation.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NativescriptPlatformLocation });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NativescriptPlatformLocation, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NSLocationStrategy }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtcGxhdGZvcm0tbG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvbGVnYWN5L3JvdXRlci9ucy1wbGF0Zm9ybS1sb2NhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQTBCLE1BQU0saUJBQWlCLENBQUM7QUFDM0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxhQUFhLENBQUM7OztBQUdoRCxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsZ0JBQWdCO0lBTWhFLFlBQW9CLGdCQUFvQztRQUN0RCxLQUFLLEVBQUUsQ0FBQztRQURVLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBb0I7UUFFdEQsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNwQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsNENBQTRDLENBQUMsQ0FBQztTQUMzRTtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxVQUFVLENBQUMsRUFBMEI7UUFDbkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQyxPQUFPLEdBQUcsRUFBRTtZQUNWLEVBQUU7UUFDSixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsWUFBWSxDQUFDLEdBQTJCO1FBQ3RDLE9BQU8sR0FBRyxFQUFFO1lBQ1YsRUFBRTtRQUNKLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDRCxJQUFJLElBQUk7UUFDTixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBQ0QsSUFBSSxRQUFRLENBQUMsUUFBZ0I7UUFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBVSxFQUFFLEtBQWEsRUFBRSxHQUFXO1FBQzlDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFVLEVBQUUsS0FBYSxFQUFFLEdBQVc7UUFDakQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQixDQUFDOzt5SEE3RFUsNEJBQTRCOzZIQUE1Qiw0QkFBNEI7MkZBQTVCLDRCQUE0QjtrQkFEeEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJy4vbnMtbG9jYXRpb24tc3RyYXRlZ3knO1xuaW1wb3J0IHsgUGxhdGZvcm1Mb2NhdGlvbiwgTG9jYXRpb25DaGFuZ2VMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHREZWJ1ZyB9IGZyb20gJy4uLy4uL3RyYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24gZXh0ZW5kcyBQbGF0Zm9ybUxvY2F0aW9uIHtcbiAgcmVhZG9ubHkgaG9zdG5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgaHJlZjogc3RyaW5nO1xuICByZWFkb25seSBwb3J0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByb3RvY29sOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhdGlvblN0cmF0ZWd5OiBOU0xvY2F0aW9uU3RyYXRlZ3kpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuICAgICAgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyTG9nKCdOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uLmNvbnN0cnVjdG9yKCknKTtcbiAgICB9XG4gIH1cblxuICBnZXRTdGF0ZSgpOiBhbnkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBnZXRCYXNlSHJlZkZyb21ET00oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJy8nO1xuICB9XG5cbiAgb25Qb3BTdGF0ZShmbjogTG9jYXRpb25DaGFuZ2VMaXN0ZW5lcik6IFZvaWRGdW5jdGlvbiB7XG4gICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5Lm9uUG9wU3RhdGUoZm4pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvL1xuICAgIH07XG4gIH1cblxuICBvbkhhc2hDaGFuZ2UoX2ZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogVm9pZEZ1bmN0aW9uIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy9cbiAgICB9O1xuICB9XG5cbiAgZ2V0IHNlYXJjaCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBnZXQgaGFzaCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBnZXQgcGF0aG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhdGlvblN0cmF0ZWd5LnBhdGgoKTtcbiAgfVxuICBzZXQgcGF0aG5hbWUoX25ld1BhdGg6IHN0cmluZykge1xuICAgIHRocm93IG5ldyBFcnJvcignTmF0aXZlc2NyaXB0UGxhdGZvcm1Mb2NhdGlvbiBzZXQgcGF0aG5hbWUgLSBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIHB1c2hTdGF0ZShzdGF0ZTogYW55LCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubG9jYXRpb25TdHJhdGVneS5wdXNoU3RhdGUoc3RhdGUsIHRpdGxlLCB1cmwsIG51bGwpO1xuICB9XG5cbiAgcmVwbGFjZVN0YXRlKHN0YXRlOiBhbnksIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgdGl0bGUsIHVybCwgbnVsbCk7XG4gIH1cblxuICBmb3J3YXJkKCk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcignTmF0aXZlc2NyaXB0UGxhdGZvcm1Mb2NhdGlvbi5mb3J3YXJkKCkgLSBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIGJhY2soKTogdm9pZCB7XG4gICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5LmJhY2soKTtcbiAgfVxufVxuIl19