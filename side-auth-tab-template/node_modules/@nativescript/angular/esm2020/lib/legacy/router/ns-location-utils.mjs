export class Outlet {
    get isPageNavigationBack() {
        return this._navigatingBackOutlets.size > 0;
    }
    set isPageNavigationBack(isBack) {
        if (!isBack) {
            if (this._navigatingBackOutlets.size > 0) {
                this._navigatingBackOutlets.delete(this._navigatingBackOutlets.values().next().value);
            }
        }
        else {
            for (const key of this.outletKeys) {
                this._navigatingBackOutlets.add(key);
            }
        }
    }
    constructor(outletKey, path, pathByOutlets, modalNavigationDepth) {
        this._navigatingBackOutlets = new Set();
        // More than one frame available when using NSEmptyOutletComponent component
        // in module that lazy loads children (loadChildren) and has outlet name.
        this.frames = [];
        this.states = [];
        // Used in reuse-strategy by its children to determine if they should be detached too.
        this.shouldDetach = true;
        this.outletKeys = [outletKey];
        this.isPageNavigationBack = false;
        this.showingModal = false;
        this.modalNavigationDepth = modalNavigationDepth || 0;
        this.pathByOutlets = pathByOutlets;
        this.path = path;
    }
    setOutletKeyNavigatingBack(key) {
        const nests = key.split('/');
        this.outletKeys
            .filter((k) => k.split('/').length >= nests.length)
            .forEach((k) => {
            this._navigatingBackOutlets.add(k);
        });
    }
    containsFrame(frame) {
        return this.frames.indexOf(frame) > -1;
    }
    peekState() {
        if (this.states.length > 0) {
            return this.states[this.states.length - 1];
        }
        return null;
    }
    containsTopState(stateUrl) {
        const lastState = this.peekState();
        return lastState && lastState.segmentGroup.toString() === stateUrl;
    }
    // Search for frame that can go back.
    // Nested 'primary' outlets could result in Outlet with multiple navigatable frames.
    getFrameToBack() {
        let frame = this.frames[this.frames.length - 1];
        if (!this.isNSEmptyOutlet) {
            for (let index = this.frames.length - 1; index >= 0; index--) {
                const currentFrame = this.frames[index];
                if (currentFrame.canGoBack()) {
                    frame = currentFrame;
                    break;
                }
            }
        }
        return frame;
    }
}
export const defaultNavOptions = {
    clearHistory: false,
    animated: true,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtbG9jYXRpb24tdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvbGVnYWN5L3JvdXRlci9ucy1sb2NhdGlvbi11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQkEsTUFBTSxPQUFPLE1BQU07SUFLakIsSUFBSSxvQkFBb0I7UUFDdEIsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQ0QsSUFBSSxvQkFBb0IsQ0FBQyxNQUFlO1FBQ3RDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFO2dCQUN4QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN2RjtTQUNGO2FBQU07WUFDTCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdEM7U0FDRjtJQUNILENBQUM7SUFtQkQsWUFBWSxTQUFpQixFQUFFLElBQVksRUFBRSxhQUFxQixFQUFFLG9CQUE2QjtRQWpDakcsMkJBQXNCLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQW9CM0MsNEVBQTRFO1FBQzVFLHlFQUF5RTtRQUN6RSxXQUFNLEdBQWlCLEVBQUUsQ0FBQztRQU0xQixXQUFNLEdBQXlCLEVBQUUsQ0FBQztRQUdsQyxzRkFBc0Y7UUFDdEYsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFFbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7UUFDbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixJQUFJLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsMEJBQTBCLENBQUMsR0FBVztRQUNwQyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxVQUFVO2FBQ1osTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDO2FBQ2xELE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ2IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBWTtRQUN4QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBZ0I7UUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ25DLE9BQU8sU0FBUyxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEtBQUssUUFBUSxDQUFDO0lBQ3JFLENBQUM7SUFFRCxxQ0FBcUM7SUFDckMsb0ZBQW9GO0lBQ3BGLGNBQWM7UUFDWixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRWhELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLEtBQUssSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQzVELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3hDLElBQUksWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFO29CQUM1QixLQUFLLEdBQUcsWUFBWSxDQUFDO29CQUNyQixNQUFNO2lCQUNQO2FBQ0Y7U0FDRjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQXNCO0lBQ2xELFlBQVksRUFBRSxLQUFLO0lBQ25CLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZyYW1lLCBOYXZpZ2F0aW9uVHJhbnNpdGlvbiB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBEZWZhdWx0VXJsU2VyaWFsaXplciwgVXJsU2VnbWVudEdyb3VwLCBVcmxUcmVlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvY2F0aW9uU3RhdGUge1xuICBxdWVyeVBhcmFtczogUGFyYW1zO1xuICBzZWdtZW50R3JvdXA6IFVybFNlZ21lbnRHcm91cDtcbiAgaXNSb290U2VnbWVudEdyb3VwOiBib29sZWFuO1xuICBpc1BhZ2VOYXZpZ2F0aW9uOiBib29sZWFuO1xuICBmcmFtZT86IEZyYW1lO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdmlnYXRpb25PcHRpb25zIHtcbiAgY2xlYXJIaXN0b3J5PzogYm9vbGVhbjtcbiAgYW5pbWF0ZWQ/OiBib29sZWFuO1xuICB0cmFuc2l0aW9uPzogTmF2aWdhdGlvblRyYW5zaXRpb247XG4gIHJlcGxhY2VVcmw/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgT3V0bGV0IHtcbiAgc2hvd2luZ01vZGFsOiBib29sZWFuO1xuICBtb2RhbE5hdmlnYXRpb25EZXB0aDogbnVtYmVyO1xuICBwYXJlbnQ6IE91dGxldDtcbiAgX25hdmlnYXRpbmdCYWNrT3V0bGV0cyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBnZXQgaXNQYWdlTmF2aWdhdGlvbkJhY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hdmlnYXRpbmdCYWNrT3V0bGV0cy5zaXplID4gMDtcbiAgfVxuICBzZXQgaXNQYWdlTmF2aWdhdGlvbkJhY2soaXNCYWNrOiBib29sZWFuKSB7XG4gICAgaWYgKCFpc0JhY2spIHtcbiAgICAgIGlmICh0aGlzLl9uYXZpZ2F0aW5nQmFja091dGxldHMuc2l6ZSA+IDApIHtcbiAgICAgICAgdGhpcy5fbmF2aWdhdGluZ0JhY2tPdXRsZXRzLmRlbGV0ZSh0aGlzLl9uYXZpZ2F0aW5nQmFja091dGxldHMudmFsdWVzKCkubmV4dCgpLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5vdXRsZXRLZXlzKSB7XG4gICAgICAgIHRoaXMuX25hdmlnYXRpbmdCYWNrT3V0bGV0cy5hZGQoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBNb3JlIHRoYW4gb25lIGtleSBhdmFpbGFibGUgd2hlbiB1c2luZyBOU0VtcHR5T3V0bGV0Q29tcG9uZW50IGNvbXBvbmVudFxuICAvLyBpbiBtb2R1bGUgdGhhdCBsYXp5IGxvYWRzIGNoaWxkcmVuIChsb2FkQ2hpbGRyZW4pIGFuZCBoYXMgb3V0bGV0IG5hbWUuXG4gIG91dGxldEtleXM6IEFycmF5PHN0cmluZz47XG5cbiAgLy8gTW9yZSB0aGFuIG9uZSBmcmFtZSBhdmFpbGFibGUgd2hlbiB1c2luZyBOU0VtcHR5T3V0bGV0Q29tcG9uZW50IGNvbXBvbmVudFxuICAvLyBpbiBtb2R1bGUgdGhhdCBsYXp5IGxvYWRzIGNoaWxkcmVuIChsb2FkQ2hpbGRyZW4pIGFuZCBoYXMgb3V0bGV0IG5hbWUuXG4gIGZyYW1lczogQXJyYXk8RnJhbWU+ID0gW107XG4gIC8vIFRoZSB1cmwgcGF0aCB0byB0aGUgT3V0bGV0LlxuICAvLyBFLkc6IHRoZSBwYXRoIHRvIE91dGxldDMgdGhhdCBpcyBuZXN0ZWQgT3V0bGV0MShob21lKS0+T3V0bGV0MihuZXN0ZWQxKS0+T3V0bGV0MyhuZXN0ZWQyKVxuICAvLyB3aWxsIGJlICdob21lL25lc3RlZDEnXG4gIHBhdGg6IHN0cmluZztcbiAgcGF0aEJ5T3V0bGV0czogc3RyaW5nO1xuICBzdGF0ZXM6IEFycmF5PExvY2F0aW9uU3RhdGU+ID0gW107XG4gIGlzTlNFbXB0eU91dGxldDogYm9vbGVhbjtcblxuICAvLyBVc2VkIGluIHJldXNlLXN0cmF0ZWd5IGJ5IGl0cyBjaGlsZHJlbiB0byBkZXRlcm1pbmUgaWYgdGhleSBzaG91bGQgYmUgZGV0YWNoZWQgdG9vLlxuICBzaG91bGREZXRhY2ggPSB0cnVlO1xuICBjb25zdHJ1Y3RvcihvdXRsZXRLZXk6IHN0cmluZywgcGF0aDogc3RyaW5nLCBwYXRoQnlPdXRsZXRzOiBzdHJpbmcsIG1vZGFsTmF2aWdhdGlvbkRlcHRoPzogbnVtYmVyKSB7XG4gICAgdGhpcy5vdXRsZXRLZXlzID0gW291dGxldEtleV07XG4gICAgdGhpcy5pc1BhZ2VOYXZpZ2F0aW9uQmFjayA9IGZhbHNlO1xuICAgIHRoaXMuc2hvd2luZ01vZGFsID0gZmFsc2U7XG4gICAgdGhpcy5tb2RhbE5hdmlnYXRpb25EZXB0aCA9IG1vZGFsTmF2aWdhdGlvbkRlcHRoIHx8IDA7XG4gICAgdGhpcy5wYXRoQnlPdXRsZXRzID0gcGF0aEJ5T3V0bGV0cztcbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuICB9XG5cbiAgc2V0T3V0bGV0S2V5TmF2aWdhdGluZ0JhY2soa2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBuZXN0cyA9IGtleS5zcGxpdCgnLycpO1xuICAgIHRoaXMub3V0bGV0S2V5c1xuICAgICAgLmZpbHRlcigoaykgPT4gay5zcGxpdCgnLycpLmxlbmd0aCA+PSBuZXN0cy5sZW5ndGgpXG4gICAgICAuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgICB0aGlzLl9uYXZpZ2F0aW5nQmFja091dGxldHMuYWRkKGspO1xuICAgICAgfSk7XG4gIH1cblxuICBjb250YWluc0ZyYW1lKGZyYW1lOiBGcmFtZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmZyYW1lcy5pbmRleE9mKGZyYW1lKSA+IC0xO1xuICB9XG5cbiAgcGVla1N0YXRlKCk6IExvY2F0aW9uU3RhdGUge1xuICAgIGlmICh0aGlzLnN0YXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZXNbdGhpcy5zdGF0ZXMubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29udGFpbnNUb3BTdGF0ZShzdGF0ZVVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbGFzdFN0YXRlID0gdGhpcy5wZWVrU3RhdGUoKTtcbiAgICByZXR1cm4gbGFzdFN0YXRlICYmIGxhc3RTdGF0ZS5zZWdtZW50R3JvdXAudG9TdHJpbmcoKSA9PT0gc3RhdGVVcmw7XG4gIH1cblxuICAvLyBTZWFyY2ggZm9yIGZyYW1lIHRoYXQgY2FuIGdvIGJhY2suXG4gIC8vIE5lc3RlZCAncHJpbWFyeScgb3V0bGV0cyBjb3VsZCByZXN1bHQgaW4gT3V0bGV0IHdpdGggbXVsdGlwbGUgbmF2aWdhdGFibGUgZnJhbWVzLlxuICBnZXRGcmFtZVRvQmFjaygpOiBGcmFtZSB7XG4gICAgbGV0IGZyYW1lID0gdGhpcy5mcmFtZXNbdGhpcy5mcmFtZXMubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAoIXRoaXMuaXNOU0VtcHR5T3V0bGV0KSB7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IHRoaXMuZnJhbWVzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICAgICAgY29uc3QgY3VycmVudEZyYW1lID0gdGhpcy5mcmFtZXNbaW5kZXhdO1xuICAgICAgICBpZiAoY3VycmVudEZyYW1lLmNhbkdvQmFjaygpKSB7XG4gICAgICAgICAgZnJhbWUgPSBjdXJyZW50RnJhbWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnJhbWU7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHROYXZPcHRpb25zOiBOYXZpZ2F0aW9uT3B0aW9ucyA9IHtcbiAgY2xlYXJIaXN0b3J5OiBmYWxzZSxcbiAgYW5pbWF0ZWQ6IHRydWUsXG59O1xuIl19