import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector, NgZone } from '@angular/core';
import { Application, ContentView, Frame } from '@nativescript/core';
import { Subject } from 'rxjs';
import { AppHostAsyncView, AppHostView } from '../../app-host-view';
import { ComponentPortal } from '../../cdk/portal/common';
import { NativeScriptDomPortalOutlet } from '../../cdk/portal/nsdom-portal-outlet';
import { once } from '../../utils/general';
import { NgViewRef } from '../../view-refs';
import { NSLocationStrategy } from '../router/ns-location-strategy';
import * as i0 from "@angular/core";
import * as i1 from "../router/ns-location-strategy";
export class ModalDialogParams {
    constructor(context = {}, closeCallback) {
        this.context = context;
        this.closeCallback = closeCallback;
    }
}
export class ModalDialogService {
    constructor(location, zone, appRef, defaultInjector) {
        this.location = location;
        this.zone = zone;
        this.appRef = appRef;
        this.defaultInjector = defaultInjector;
    }
    /**
     * Emits anytime a modal is closed with the ModalDialogParams which were injected into the component which is now closing.
     * For example, can be used to wire up Rx flows outside the scope of just the component being handled.
     */
    get closed$() {
        if (!this._closed$) {
            this._closed$ = new Subject();
        }
        return this._closed$;
    }
    showModal(type, options = {}) {
        // if (!options.viewContainerRef) {
        //   throw new Error('No viewContainerRef: ' + 'Make sure you pass viewContainerRef in ModalDialogOptions.');
        // }
        let parentView = options.viewContainerRef?.element.nativeElement || Application.getRootView();
        if (options.target) {
            parentView = options.target;
        }
        if ((parentView instanceof AppHostView || parentView instanceof AppHostAsyncView) && parentView.ngAppRoot) {
            parentView = parentView.ngAppRoot;
        }
        // _ngDialogRoot is the first child of the previously detached proxy.
        // It should have 'viewController' (iOS) or '_dialogFragment' (Android) available for
        // presenting future modal views.
        if (parentView._ngDialogRoot) {
            parentView = parentView._ngDialogRoot;
        }
        // resolve from particular module (moduleRef)
        // or from same module as parentView (viewContainerRef)
        const componentInjector = options.moduleRef?.injector || options.viewContainerRef?.injector || this.defaultInjector;
        const resolver = componentInjector.get(ComponentFactoryResolver);
        let frame = parentView;
        if (!(parentView instanceof Frame)) {
            frame = (parentView.page && parentView.page.frame) || Frame.topmost();
        }
        this.location?._beginModalNavigation(frame);
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                try {
                    this._showDialog({
                        ...options,
                        containerRef: options.viewContainerRef,
                        injector: componentInjector,
                        context: options.context,
                        doneCallback: resolve,
                        parentView,
                        resolver,
                        type,
                    });
                }
                catch (err) {
                    reject(err);
                }
            }, 10);
        });
    }
    _showDialog(options) {
        let componentViewRef;
        let detachedLoaderRef;
        let portalOutlet;
        const closeCallback = once(async (...args) => {
            options.doneCallback.apply(undefined, args);
            if (componentViewRef) {
                componentViewRef.firstNativeLikeView.closeModal();
                const params = this.openedModalParams.pop();
                if (this._closed$) {
                    this._closed$.next(params);
                }
                await this.location._closeModalNavigation();
                if (detachedLoaderRef || portalOutlet) {
                    this.zone.run(() => {
                        portalOutlet?.dispose();
                        detachedLoaderRef?.instance.detectChanges();
                        detachedLoaderRef?.destroy();
                    });
                }
            }
        });
        const modalParams = new ModalDialogParams(options.context, closeCallback);
        if (!this.openedModalParams) {
            this.openedModalParams = [];
        }
        this.openedModalParams.push(modalParams);
        const childInjector = Injector.create({
            providers: [{ provide: ModalDialogParams, useValue: modalParams }],
            parent: options.injector,
        });
        this.zone.run(() => {
            // if we ever support templates in the old API
            // if(options.templateRef) {
            //     const detachedFactory = options.resolver.resolveComponentFactory(DetachedLoader);
            //     if(options.attachToContainerRef) {
            //         detachedLoaderRef = options.attachToContainerRef.createComponent(detachedFactory, 0, childInjector, null);
            //     } else {
            //         detachedLoaderRef = detachedFactory.create(childInjector); // this DetachedLoader is **completely** detached
            //         this.appRef.attachView(detachedLoaderRef.hostView); // we attach it to the applicationRef, so it becomes a "root" view in angular's hierarchy
            //     }
            //     detachedLoaderRef.changeDetectorRef.detectChanges(); // force a change detection
            //     detachedLoaderRef.instance.createTemplatePortal(options.templateRef);
            // }
            const targetView = new ContentView();
            const portal = new ComponentPortal(options.type);
            portalOutlet = new NativeScriptDomPortalOutlet(targetView, options.resolver, this.appRef, childInjector);
            const componentRef = portalOutlet.attach(portal);
            componentRef.changeDetectorRef.detectChanges();
            componentViewRef = new NgViewRef(componentRef);
            if (options.useContextAsComponentProps && options.context) {
                for (const key in options.context) {
                    componentViewRef.ref.instance[key] = options.context[key];
                }
            }
            if (componentViewRef !== componentRef.location.nativeElement) {
                componentRef.location.nativeElement._ngDialogRoot = componentViewRef.firstNativeLikeView;
            }
            // if we don't detach the view from its parent, ios gets mad
            componentViewRef.detachNativeLikeView();
            options.parentView.showModal(componentViewRef.firstNativeLikeView, { ...options, closeCallback });
        });
    }
}
ModalDialogService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ModalDialogService, deps: [{ token: i1.NSLocationStrategy }, { token: i0.NgZone }, { token: i0.ApplicationRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
ModalDialogService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ModalDialogService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ModalDialogService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NSLocationStrategy }, { type: i0.NgZone }, { type: i0.ApplicationRef }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9sZWdhY3kvZGlyZWN0aXZlcy9kaWFsb2dzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsd0JBQXdCLEVBQWdCLFVBQVUsRUFBRSxRQUFRLEVBQWUsTUFBTSxFQUEwQixNQUFNLGVBQWUsQ0FBQztBQUMxSixPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQW9DLE1BQU0sb0JBQW9CLENBQUM7QUFDdkcsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzFELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7OztBQStCcEUsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUFtQixVQUFlLEVBQUUsRUFBUyxhQUErQjtRQUF6RCxZQUFPLEdBQVAsT0FBTyxDQUFVO1FBQVMsa0JBQWEsR0FBYixhQUFhLENBQWtCO0lBQUcsQ0FBQztDQUNqRjtBQUdELE1BQU0sT0FBTyxrQkFBa0I7SUFTN0IsWUFBb0IsUUFBNEIsRUFBVSxJQUFZLEVBQVUsTUFBc0IsRUFBVSxlQUF5QjtRQUFySCxhQUFRLEdBQVIsUUFBUSxDQUFvQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQVE7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFn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RSxDQUFDLENBQUM7UUFDcEcsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzsrR0E1SVUsa0JBQWtCO21IQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIE5nTW9kdWxlUmVmLCBOZ1pvbmUsIFR5cGUsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uLCBDb250ZW50VmlldywgRnJhbWUsIFNob3dNb2RhbE9wdGlvbnMsIFZpZXcsIFZpZXdCYXNlIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFwcEhvc3RBc3luY1ZpZXcsIEFwcEhvc3RWaWV3IH0gZnJvbSAnLi4vLi4vYXBwLWhvc3Qtdmlldyc7XG5pbXBvcnQgeyBEZXRhY2hlZExvYWRlciB9IGZyb20gJy4uLy4uL2Nkay9kZXRhY2hlZC1sb2FkZXInO1xuaW1wb3J0IHsgQ29tcG9uZW50UG9ydGFsIH0gZnJvbSAnLi4vLi4vY2RrL3BvcnRhbC9jb21tb24nO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0RG9tUG9ydGFsT3V0bGV0IH0gZnJvbSAnLi4vLi4vY2RrL3BvcnRhbC9uc2RvbS1wb3J0YWwtb3V0bGV0JztcbmltcG9ydCB7IG9uY2UgfSBmcm9tICcuLi8uLi91dGlscy9nZW5lcmFsJztcbmltcG9ydCB7IE5nVmlld1JlZiB9IGZyb20gJy4uLy4uL3ZpZXctcmVmcyc7XG5pbXBvcnQgeyBOU0xvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICcuLi9yb3V0ZXIvbnMtbG9jYXRpb24tc3RyYXRlZ3knO1xuXG5leHBvcnQgdHlwZSBCYXNlU2hvd01vZGFsT3B0aW9ucyA9IFBpY2s8U2hvd01vZGFsT3B0aW9ucywgRXhjbHVkZTxrZXlvZiBTaG93TW9kYWxPcHRpb25zLCAnY2xvc2VDYWxsYmFjaycgfCAnY29udGV4dCc+PjtcblxuZXhwb3J0IGludGVyZmFjZSBNb2RhbERpYWxvZ09wdGlvbnMgZXh0ZW5kcyBCYXNlU2hvd01vZGFsT3B0aW9ucyB7XG4gIGNvbnRleHQ/OiBhbnk7XG4gIHZpZXdDb250YWluZXJSZWY/OiBWaWV3Q29udGFpbmVyUmVmO1xuICBtb2R1bGVSZWY/OiBOZ01vZHVsZVJlZjxhbnk+O1xuICB0YXJnZXQ/OiBWaWV3O1xuICAvKipcbiAgICogVXNlIGNvbnRleHQgZGF0YSBhcyBjb21wb25lbnQgaW5zdGFuY2UgcHJvcGVydGllc1xuICAgKi9cbiAgdXNlQ29udGV4dEFzQ29tcG9uZW50UHJvcHM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNob3dEaWFsb2dPcHRpb25zIGV4dGVuZHMgTW9kYWxEaWFsb2dPcHRpb25zIHtcbiAgY29udGFpbmVyUmVmPzogVmlld0NvbnRhaW5lclJlZjtcbiAgLyoqXG4gICAqIHdoaWNoIGNvbnRhaW5lciB0byBhdHRhY2ggdGhlIGNoYW5nZSBkZXRlY3Rpb25cbiAgICogaWYgbm90IHNwZWNpZmllZCwgYXR0YWNoZXMgdG8gdGhlIEFwcGxpY2F0aW9uUmVmIChyZWNvbW1lbmRlZClcbiAgICovXG4gIGF0dGFjaFRvQ29udGFpbmVyUmVmPzogVmlld0NvbnRhaW5lclJlZjtcbiAgaW5qZWN0b3I6IEluamVjdG9yO1xuICBjb250ZXh0OiBhbnk7XG4gIGRvbmVDYWxsYmFjaztcbiAgcGFnZUZhY3Rvcnk/OiBhbnk7XG4gIHBhcmVudFZpZXc6IFZpZXdCYXNlO1xuICByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuICB0eXBlOiBUeXBlPGFueT47XG59XG5cbmV4cG9ydCBjbGFzcyBNb2RhbERpYWxvZ1BhcmFtcyB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZXh0OiBhbnkgPSB7fSwgcHVibGljIGNsb3NlQ2FsbGJhY2s6ICguLi5hcmdzKSA9PiBhbnkpIHt9XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb2RhbERpYWxvZ1NlcnZpY2Uge1xuICAvKipcbiAgICogQW55IG9wZW5lZCBNb2RhbERpYWxvZ1BhcmFtcyBpbiBvcmRlciBvZiB3aGVuIHRoZXkgd2VyZSBvcGVuZWQgKE1vc3QgcmVjZW50IG9uIHRvcCkuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgd2hlbiB5b3UgbmVlZCBhY2Nlc3MgdG8gTW9kYWxEaWFsb2dQYXJhbXMgb3V0c2lkZSBvZiB0aGUgY29tcG9uZW50IHdoaWNoIGhhZCB0aGVtIGluamVjdGVkLlxuICAgKiBFYWNoIGlzIHBvcHBlZCBvZmYgYXMgbW9kYWxzIGFyZSBjbG9zZWQuXG4gICAqL1xuICBvcGVuZWRNb2RhbFBhcmFtczogQXJyYXk8TW9kYWxEaWFsb2dQYXJhbXM+O1xuICBfY2xvc2VkJDogU3ViamVjdDxNb2RhbERpYWxvZ1BhcmFtcz47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhdGlvbjogTlNMb2NhdGlvblN0cmF0ZWd5LCBwcml2YXRlIHpvbmU6IE5nWm9uZSwgcHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLCBwcml2YXRlIGRlZmF1bHRJbmplY3RvcjogSW5qZWN0b3IpIHt9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFueXRpbWUgYSBtb2RhbCBpcyBjbG9zZWQgd2l0aCB0aGUgTW9kYWxEaWFsb2dQYXJhbXMgd2hpY2ggd2VyZSBpbmplY3RlZCBpbnRvIHRoZSBjb21wb25lbnQgd2hpY2ggaXMgbm93IGNsb3NpbmcuXG4gICAqIEZvciBleGFtcGxlLCBjYW4gYmUgdXNlZCB0byB3aXJlIHVwIFJ4IGZsb3dzIG91dHNpZGUgdGhlIHNjb3BlIG9mIGp1c3QgdGhlIGNvbXBvbmVudCBiZWluZyBoYW5kbGVkLlxuICAgKi9cbiAgZ2V0IGNsb3NlZCQoKSB7XG4gICAgaWYgKCF0aGlzLl9jbG9zZWQkKSB7XG4gICAgICB0aGlzLl9jbG9zZWQkID0gbmV3IFN1YmplY3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2Nsb3NlZCQ7XG4gIH1cblxuICBwdWJsaWMgc2hvd01vZGFsKHR5cGU6IFR5cGU8YW55Piwgb3B0aW9uczogTW9kYWxEaWFsb2dPcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIGlmICghb3B0aW9ucy52aWV3Q29udGFpbmVyUmVmKSB7XG4gICAgLy8gICB0aHJvdyBuZXcgRXJyb3IoJ05vIHZpZXdDb250YWluZXJSZWY6ICcgKyAnTWFrZSBzdXJlIHlvdSBwYXNzIHZpZXdDb250YWluZXJSZWYgaW4gTW9kYWxEaWFsb2dPcHRpb25zLicpO1xuICAgIC8vIH1cblxuICAgIGxldCBwYXJlbnRWaWV3ID0gb3B0aW9ucy52aWV3Q29udGFpbmVyUmVmPy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQgfHwgQXBwbGljYXRpb24uZ2V0Um9vdFZpZXcoKTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgIHBhcmVudFZpZXcgPSBvcHRpb25zLnRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoKHBhcmVudFZpZXcgaW5zdGFuY2VvZiBBcHBIb3N0VmlldyB8fCBwYXJlbnRWaWV3IGluc3RhbmNlb2YgQXBwSG9zdEFzeW5jVmlldykgJiYgcGFyZW50Vmlldy5uZ0FwcFJvb3QpIHtcbiAgICAgIHBhcmVudFZpZXcgPSBwYXJlbnRWaWV3Lm5nQXBwUm9vdDtcbiAgICB9XG5cbiAgICAvLyBfbmdEaWFsb2dSb290IGlzIHRoZSBmaXJzdCBjaGlsZCBvZiB0aGUgcHJldmlvdXNseSBkZXRhY2hlZCBwcm94eS5cbiAgICAvLyBJdCBzaG91bGQgaGF2ZSAndmlld0NvbnRyb2xsZXInIChpT1MpIG9yICdfZGlhbG9nRnJhZ21lbnQnIChBbmRyb2lkKSBhdmFpbGFibGUgZm9yXG4gICAgLy8gcHJlc2VudGluZyBmdXR1cmUgbW9kYWwgdmlld3MuXG4gICAgaWYgKHBhcmVudFZpZXcuX25nRGlhbG9nUm9vdCkge1xuICAgICAgcGFyZW50VmlldyA9IHBhcmVudFZpZXcuX25nRGlhbG9nUm9vdDtcbiAgICB9XG5cbiAgICAvLyByZXNvbHZlIGZyb20gcGFydGljdWxhciBtb2R1bGUgKG1vZHVsZVJlZilcbiAgICAvLyBvciBmcm9tIHNhbWUgbW9kdWxlIGFzIHBhcmVudFZpZXcgKHZpZXdDb250YWluZXJSZWYpXG4gICAgY29uc3QgY29tcG9uZW50SW5qZWN0b3IgPSBvcHRpb25zLm1vZHVsZVJlZj8uaW5qZWN0b3IgfHwgb3B0aW9ucy52aWV3Q29udGFpbmVyUmVmPy5pbmplY3RvciB8fCB0aGlzLmRlZmF1bHRJbmplY3RvcjtcbiAgICBjb25zdCByZXNvbHZlciA9IGNvbXBvbmVudEluamVjdG9yLmdldChDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpO1xuXG4gICAgbGV0IGZyYW1lID0gcGFyZW50VmlldztcbiAgICBpZiAoIShwYXJlbnRWaWV3IGluc3RhbmNlb2YgRnJhbWUpKSB7XG4gICAgICBmcmFtZSA9IChwYXJlbnRWaWV3LnBhZ2UgJiYgcGFyZW50Vmlldy5wYWdlLmZyYW1lKSB8fCBGcmFtZS50b3Btb3N0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2NhdGlvbj8uX2JlZ2luTW9kYWxOYXZpZ2F0aW9uKGZyYW1lKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLl9zaG93RGlhbG9nKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBjb250YWluZXJSZWY6IG9wdGlvbnMudmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgIGluamVjdG9yOiBjb21wb25lbnRJbmplY3RvcixcbiAgICAgICAgICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dCxcbiAgICAgICAgICAgIGRvbmVDYWxsYmFjazogcmVzb2x2ZSxcbiAgICAgICAgICAgIHBhcmVudFZpZXcsXG4gICAgICAgICAgICByZXNvbHZlcixcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICB9LCAxMCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIF9zaG93RGlhbG9nKG9wdGlvbnM6IFNob3dEaWFsb2dPcHRpb25zKTogdm9pZCB7XG4gICAgbGV0IGNvbXBvbmVudFZpZXdSZWY6IE5nVmlld1JlZjx1bmtub3duPjtcbiAgICBsZXQgZGV0YWNoZWRMb2FkZXJSZWY6IENvbXBvbmVudFJlZjxEZXRhY2hlZExvYWRlcj47XG4gICAgbGV0IHBvcnRhbE91dGxldDogTmF0aXZlU2NyaXB0RG9tUG9ydGFsT3V0bGV0O1xuXG4gICAgY29uc3QgY2xvc2VDYWxsYmFjayA9IG9uY2UoYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAgIG9wdGlvbnMuZG9uZUNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICBpZiAoY29tcG9uZW50Vmlld1JlZikge1xuICAgICAgICBjb21wb25lbnRWaWV3UmVmLmZpcnN0TmF0aXZlTGlrZVZpZXcuY2xvc2VNb2RhbCgpO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLm9wZW5lZE1vZGFsUGFyYW1zLnBvcCgpO1xuICAgICAgICBpZiAodGhpcy5fY2xvc2VkJCkge1xuICAgICAgICAgIHRoaXMuX2Nsb3NlZCQubmV4dChwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMubG9jYXRpb24uX2Nsb3NlTW9kYWxOYXZpZ2F0aW9uKCk7XG4gICAgICAgIGlmIChkZXRhY2hlZExvYWRlclJlZiB8fCBwb3J0YWxPdXRsZXQpIHtcbiAgICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgIHBvcnRhbE91dGxldD8uZGlzcG9zZSgpO1xuICAgICAgICAgICAgZGV0YWNoZWRMb2FkZXJSZWY/Lmluc3RhbmNlLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgIGRldGFjaGVkTG9hZGVyUmVmPy5kZXN0cm95KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IG1vZGFsUGFyYW1zID0gbmV3IE1vZGFsRGlhbG9nUGFyYW1zKG9wdGlvbnMuY29udGV4dCwgY2xvc2VDYWxsYmFjayk7XG4gICAgaWYgKCF0aGlzLm9wZW5lZE1vZGFsUGFyYW1zKSB7XG4gICAgICB0aGlzLm9wZW5lZE1vZGFsUGFyYW1zID0gW107XG4gICAgfVxuICAgIHRoaXMub3BlbmVkTW9kYWxQYXJhbXMucHVzaChtb2RhbFBhcmFtcyk7XG5cbiAgICBjb25zdCBjaGlsZEluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTW9kYWxEaWFsb2dQYXJhbXMsIHVzZVZhbHVlOiBtb2RhbFBhcmFtcyB9XSxcbiAgICAgIHBhcmVudDogb3B0aW9ucy5pbmplY3RvcixcbiAgICB9KTtcbiAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgIC8vIGlmIHdlIGV2ZXIgc3VwcG9ydCB0ZW1wbGF0ZXMgaW4gdGhlIG9sZCBBUElcbiAgICAgIC8vIGlmKG9wdGlvbnMudGVtcGxhdGVSZWYpIHtcbiAgICAgIC8vICAgICBjb25zdCBkZXRhY2hlZEZhY3RvcnkgPSBvcHRpb25zLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KERldGFjaGVkTG9hZGVyKTtcbiAgICAgIC8vICAgICBpZihvcHRpb25zLmF0dGFjaFRvQ29udGFpbmVyUmVmKSB7XG4gICAgICAvLyAgICAgICAgIGRldGFjaGVkTG9hZGVyUmVmID0gb3B0aW9ucy5hdHRhY2hUb0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoZGV0YWNoZWRGYWN0b3J5LCAwLCBjaGlsZEluamVjdG9yLCBudWxsKTtcbiAgICAgIC8vICAgICB9IGVsc2Uge1xuICAgICAgLy8gICAgICAgICBkZXRhY2hlZExvYWRlclJlZiA9IGRldGFjaGVkRmFjdG9yeS5jcmVhdGUoY2hpbGRJbmplY3Rvcik7IC8vIHRoaXMgRGV0YWNoZWRMb2FkZXIgaXMgKipjb21wbGV0ZWx5KiogZGV0YWNoZWRcbiAgICAgIC8vICAgICAgICAgdGhpcy5hcHBSZWYuYXR0YWNoVmlldyhkZXRhY2hlZExvYWRlclJlZi5ob3N0Vmlldyk7IC8vIHdlIGF0dGFjaCBpdCB0byB0aGUgYXBwbGljYXRpb25SZWYsIHNvIGl0IGJlY29tZXMgYSBcInJvb3RcIiB2aWV3IGluIGFuZ3VsYXIncyBoaWVyYXJjaHlcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyAgICAgZGV0YWNoZWRMb2FkZXJSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpOyAvLyBmb3JjZSBhIGNoYW5nZSBkZXRlY3Rpb25cbiAgICAgIC8vICAgICBkZXRhY2hlZExvYWRlclJlZi5pbnN0YW5jZS5jcmVhdGVUZW1wbGF0ZVBvcnRhbChvcHRpb25zLnRlbXBsYXRlUmVmKTtcbiAgICAgIC8vIH1cbiAgICAgIGNvbnN0IHRhcmdldFZpZXcgPSBuZXcgQ29udGVudFZpZXcoKTtcbiAgICAgIGNvbnN0IHBvcnRhbCA9IG5ldyBDb21wb25lbnRQb3J0YWwob3B0aW9ucy50eXBlKTtcbiAgICAgIHBvcnRhbE91dGxldCA9IG5ldyBOYXRpdmVTY3JpcHREb21Qb3J0YWxPdXRsZXQodGFyZ2V0Vmlldywgb3B0aW9ucy5yZXNvbHZlciwgdGhpcy5hcHBSZWYsIGNoaWxkSW5qZWN0b3IpO1xuICAgICAgY29uc3QgY29tcG9uZW50UmVmID0gcG9ydGFsT3V0bGV0LmF0dGFjaChwb3J0YWwpO1xuICAgICAgY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIGNvbXBvbmVudFZpZXdSZWYgPSBuZXcgTmdWaWV3UmVmKGNvbXBvbmVudFJlZik7XG4gICAgICBpZiAob3B0aW9ucy51c2VDb250ZXh0QXNDb21wb25lbnRQcm9wcyAmJiBvcHRpb25zLmNvbnRleHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucy5jb250ZXh0KSB7XG4gICAgICAgICAgKDxDb21wb25lbnRSZWY8YW55Pj5jb21wb25lbnRWaWV3UmVmLnJlZikuaW5zdGFuY2Vba2V5XSA9IG9wdGlvbnMuY29udGV4dFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY29tcG9uZW50Vmlld1JlZiAhPT0gY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQuX25nRGlhbG9nUm9vdCA9IGNvbXBvbmVudFZpZXdSZWYuZmlyc3ROYXRpdmVMaWtlVmlldztcbiAgICAgIH1cbiAgICAgIC8vIGlmIHdlIGRvbid0IGRldGFjaCB0aGUgdmlldyBmcm9tIGl0cyBwYXJlbnQsIGlvcyBnZXRzIG1hZFxuICAgICAgY29tcG9uZW50Vmlld1JlZi5kZXRhY2hOYXRpdmVMaWtlVmlldygpO1xuICAgICAgb3B0aW9ucy5wYXJlbnRWaWV3LnNob3dNb2RhbChjb21wb25lbnRWaWV3UmVmLmZpcnN0TmF0aXZlTGlrZVZpZXcsIHsgLi4ub3B0aW9ucywgY2xvc2VDYWxsYmFjayB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19