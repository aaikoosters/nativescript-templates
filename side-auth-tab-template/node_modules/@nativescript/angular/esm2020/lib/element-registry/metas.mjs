import { FormattedString, Page, Span } from '@nativescript/core';
import { isInvisibleNode } from '../views/utils';
export const frameMeta = {
    insertChild: (parent, child) => {
        // Page cannot be added to Frame with _addChildFromBuilder (thwos "use defaultPage" error)
        if (isInvisibleNode(child)) {
            return;
        }
        else if (child instanceof Page) {
            parent.navigate({ create: () => child });
        }
        else {
            throw new Error('Only a Page can be a child of Frame');
        }
    },
};
export const formattedStringMeta = {
    insertChild(parent, child, next) {
        const index = parent.spans.indexOf(next);
        if (index > -1) {
            parent.spans.splice(index, 0, child);
        }
        else {
            parent.spans.push(child);
        }
    },
    removeChild(parent, child) {
        const index = parent.spans.indexOf(child);
        if (index > -1) {
            parent.spans.splice(index, 1);
        }
    },
};
export const textBaseMeta = {
    insertChild(parent, child, next) {
        if (child instanceof FormattedString) {
            parent.formattedText = child;
        }
        else if (child instanceof Span) {
            parent.formattedText ?? (parent.formattedText = new FormattedString());
            formattedStringMeta.insertChild(parent.formattedText, child, next);
        }
    },
    removeChild(parent, child) {
        if (!parent.formattedText)
            return;
        if (child instanceof FormattedString) {
            if (parent.formattedText === child) {
                parent.formattedText = null;
            }
        }
        else if (child instanceof Span) {
            formattedStringMeta.removeChild(parent.formattedText, child);
        }
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvZWxlbWVudC1yZWdpc3RyeS9tZXRhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFTLElBQUksRUFBRSxJQUFJLEVBQVksTUFBTSxvQkFBb0IsQ0FBQztBQUNsRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHakQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFrQjtJQUN0QyxXQUFXLEVBQUUsQ0FBQyxNQUFhLEVBQUUsS0FBYSxFQUFFLEVBQUU7UUFDNUMsMEZBQTBGO1FBQzFGLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE9BQU87U0FDUjthQUFNLElBQUksS0FBSyxZQUFZLElBQUksRUFBRTtZQUNoQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDMUM7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztTQUN4RDtJQUNILENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQWtCO0lBQ2hELFdBQVcsQ0FBQyxNQUF1QixFQUFFLEtBQVcsRUFBRSxJQUFVO1FBQzFELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN0QzthQUFNO1lBQ0wsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBQ0QsV0FBVyxDQUFDLE1BQXVCLEVBQUUsS0FBVztRQUM5QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFrQjtJQUN6QyxXQUFXLENBQUMsTUFBZ0IsRUFBRSxLQUFLLEVBQUUsSUFBSTtRQUN2QyxJQUFJLEtBQUssWUFBWSxlQUFlLEVBQUU7WUFDcEMsTUFBTSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7U0FDOUI7YUFBTSxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7WUFDaEMsTUFBTSxDQUFDLGFBQWEsS0FBcEIsTUFBTSxDQUFDLGFBQWEsR0FBSyxJQUFJLGVBQWUsRUFBRSxFQUFDO1lBQy9DLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNwRTtJQUNILENBQUM7SUFDRCxXQUFXLENBQUMsTUFBZ0IsRUFBRSxLQUFhO1FBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYTtZQUFFLE9BQU87UUFDbEMsSUFBSSxLQUFLLFlBQVksZUFBZSxFQUFFO1lBQ3BDLElBQUksTUFBTSxDQUFDLGFBQWEsS0FBSyxLQUFLLEVBQUU7Z0JBQ2xDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO2FBQzdCO1NBQ0Y7YUFBTSxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7WUFDaEMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUQ7SUFDSCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1hdHRlZFN0cmluZywgRnJhbWUsIFBhZ2UsIFNwYW4sIFRleHRCYXNlIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IGlzSW52aXNpYmxlTm9kZSB9IGZyb20gJy4uL3ZpZXdzL3V0aWxzJztcbmltcG9ydCB7IE5nVmlldywgVmlld0NsYXNzTWV0YSB9IGZyb20gJy4uL3ZpZXdzL3ZpZXctdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgZnJhbWVNZXRhOiBWaWV3Q2xhc3NNZXRhID0ge1xuICBpbnNlcnRDaGlsZDogKHBhcmVudDogRnJhbWUsIGNoaWxkOiBOZ1ZpZXcpID0+IHtcbiAgICAvLyBQYWdlIGNhbm5vdCBiZSBhZGRlZCB0byBGcmFtZSB3aXRoIF9hZGRDaGlsZEZyb21CdWlsZGVyICh0aHdvcyBcInVzZSBkZWZhdWx0UGFnZVwiIGVycm9yKVxuICAgIGlmIChpc0ludmlzaWJsZU5vZGUoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIFBhZ2UpIHtcbiAgICAgIHBhcmVudC5uYXZpZ2F0ZSh7IGNyZWF0ZTogKCkgPT4gY2hpbGQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBhIFBhZ2UgY2FuIGJlIGEgY2hpbGQgb2YgRnJhbWUnKTtcbiAgICB9XG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0dGVkU3RyaW5nTWV0YTogVmlld0NsYXNzTWV0YSA9IHtcbiAgaW5zZXJ0Q2hpbGQocGFyZW50OiBGb3JtYXR0ZWRTdHJpbmcsIGNoaWxkOiBTcGFuLCBuZXh0OiBTcGFuKSB7XG4gICAgY29uc3QgaW5kZXggPSBwYXJlbnQuc3BhbnMuaW5kZXhPZihuZXh0KTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcGFyZW50LnNwYW5zLnNwbGljZShpbmRleCwgMCwgY2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnQuc3BhbnMucHVzaChjaGlsZCk7XG4gICAgfVxuICB9LFxuICByZW1vdmVDaGlsZChwYXJlbnQ6IEZvcm1hdHRlZFN0cmluZywgY2hpbGQ6IFNwYW4pIHtcbiAgICBjb25zdCBpbmRleCA9IHBhcmVudC5zcGFucy5pbmRleE9mKGNoaWxkKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcGFyZW50LnNwYW5zLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IHRleHRCYXNlTWV0YTogVmlld0NsYXNzTWV0YSA9IHtcbiAgaW5zZXJ0Q2hpbGQocGFyZW50OiBUZXh0QmFzZSwgY2hpbGQsIG5leHQpIHtcbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBGb3JtYXR0ZWRTdHJpbmcpIHtcbiAgICAgIHBhcmVudC5mb3JtYXR0ZWRUZXh0ID0gY2hpbGQ7XG4gICAgfSBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIFNwYW4pIHtcbiAgICAgIHBhcmVudC5mb3JtYXR0ZWRUZXh0ID8/PSBuZXcgRm9ybWF0dGVkU3RyaW5nKCk7XG4gICAgICBmb3JtYXR0ZWRTdHJpbmdNZXRhLmluc2VydENoaWxkKHBhcmVudC5mb3JtYXR0ZWRUZXh0LCBjaGlsZCwgbmV4dCk7XG4gICAgfVxuICB9LFxuICByZW1vdmVDaGlsZChwYXJlbnQ6IFRleHRCYXNlLCBjaGlsZDogTmdWaWV3KSB7XG4gICAgaWYgKCFwYXJlbnQuZm9ybWF0dGVkVGV4dCkgcmV0dXJuO1xuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEZvcm1hdHRlZFN0cmluZykge1xuICAgICAgaWYgKHBhcmVudC5mb3JtYXR0ZWRUZXh0ID09PSBjaGlsZCkge1xuICAgICAgICBwYXJlbnQuZm9ybWF0dGVkVGV4dCA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIFNwYW4pIHtcbiAgICAgIGZvcm1hdHRlZFN0cmluZ01ldGEucmVtb3ZlQ2hpbGQocGFyZW50LmZvcm1hdHRlZFRleHQsIGNoaWxkKTtcbiAgICB9XG4gIH0sXG59O1xuIl19