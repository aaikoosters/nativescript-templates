import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
import * as i0 from "@angular/core";
const SELECTED_INDEX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => SelectedIndexValueAccessor),
    multi: true,
};
/**
 * The accessor for setting a selectedIndex and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <SegmentedBar [(ngModel)]="model.test">
 *  ```
 */
export class SelectedIndexValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:max-line-length directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.value = normalized;
        if (this.viewInitialized) {
            this.view.selectedIndex = this.value;
        }
    }
    ngAfterViewInit() {
        this.viewInitialized = true;
        this.view.selectedIndex = this.value;
    }
}
SelectedIndexValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: SelectedIndexValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
SelectedIndexValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: SelectedIndexValueAccessor, selector: "SegmentedBar[ngModel],SegmentedBar[formControlName],SegmentedBar[formControl],segmentedBar[ngModel],segmentedBar[formControlName],segmentedBar[formControl],segmentedbar[ngModel],segmentedbar[formControlName],segmentedbar[formControl],segmented-bar[ngModel],segmented-bar[formControlName],segmented-bar[formControl],ListPicker[ngModel],ListPicker[formControlName],ListPicker[formControl],listPicker[ngModel],listPicker[formControlName],listPicker[formControl],listpicker[ngModel],listpicker[formControlName],listpicker[formControl],list-picker[ngModel],list-picker[formControlName],list-picker[formControl],TabView[ngModel],TabView[formControlName],TabView[formControl],tabView[ngModel],tabView[formControlName],tabView[formControl],tabview[ngModel],tabview[formControlName],tabview[formControl],tab-view[ngModel],tab-view[formControlName],tab-view[formControl]", host: { listeners: { "selectedIndexChange": "onChange($event.value)" } }, providers: [SELECTED_INDEX_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: SelectedIndexValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: 'SegmentedBar[ngModel],SegmentedBar[formControlName],SegmentedBar[formControl],' +
                        'segmentedBar[ngModel],segmentedBar[formControlName],segmentedBar[formControl],' +
                        'segmentedbar[ngModel],segmentedbar[formControlName],segmentedbar[formControl],' +
                        'segmented-bar[ngModel],segmented-bar[formControlName],segmented-bar[formControl],' +
                        'ListPicker[ngModel],ListPicker[formControlName],ListPicker[formControl],' +
                        'listPicker[ngModel],listPicker[formControlName],listPicker[formControl],' +
                        'listpicker[ngModel],listpicker[formControlName],listpicker[formControl],' +
                        'list-picker[ngModel],list-picker[formControlName],list-picker[formControl],' +
                        'TabView[ngModel],TabView[formControlName],TabView[formControl],' +
                        'tabView[ngModel],tabView[formControlName],tabView[formControl],' +
                        'tabview[ngModel],tabview[formControlName],tabview[formControl],' +
                        'tab-view[ngModel],tab-view[formControlName],tab-view[formControl]',
                    providers: [SELECTED_INDEX_VALUE_ACCESSOR],
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        '(selectedIndexChange)': 'onChange($event.value)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0ZWRJbmRleC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9mb3Jtcy92YWx1ZS1hY2Nlc3NvcnMvc2VsZWN0ZWRJbmRleC12YWx1ZS1hY2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUUxRCxNQUFNLDZCQUE2QixHQUFHO0lBQ3BDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztJQUN6RCxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUM7QUFJRjs7Ozs7Ozs7R0FRRztBQXFCSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsaUJBQWlDO0lBQy9FLDZEQUE2RDtJQUM3RCxZQUFZLFVBQXNCO1FBQ2hDLEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUtELFVBQVUsQ0FBQyxLQUFVO1FBQ25CLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7UUFFeEIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdkMsQ0FBQzs7dUhBckJVLDBCQUEwQjsyR0FBMUIsMEJBQTBCLGk4QkFOMUIsQ0FBQyw2QkFBNkIsQ0FBQzsyRkFNL0IsMEJBQTBCO2tCQXBCdEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQ04sZ0ZBQWdGO3dCQUNoRixnRkFBZ0Y7d0JBQ2hGLGdGQUFnRjt3QkFDaEYsbUZBQW1GO3dCQUNuRiwwRUFBMEU7d0JBQzFFLDBFQUEwRTt3QkFDMUUsMEVBQTBFO3dCQUMxRSw2RUFBNkU7d0JBQzdFLGlFQUFpRTt3QkFDakUsaUVBQWlFO3dCQUNqRSxpRUFBaUU7d0JBQ2pFLG1FQUFtRTtvQkFDckUsU0FBUyxFQUFFLENBQUMsNkJBQTZCLENBQUM7b0JBQzFDLHFFQUFxRTtvQkFDckUsSUFBSSxFQUFFO3dCQUNKLHVCQUF1QixFQUFFLHdCQUF3QjtxQkFDbEQ7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBCYXNlVmFsdWVBY2Nlc3NvciB9IGZyb20gJy4vYmFzZS12YWx1ZS1hY2Nlc3Nvcic7XG5cbmNvbnN0IFNFTEVDVEVEX0lOREVYX1ZBTFVFX0FDQ0VTU09SID0ge1xuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU2VsZWN0ZWRJbmRleFZhbHVlQWNjZXNzb3IpLFxuICBtdWx0aTogdHJ1ZSxcbn07XG5cbmV4cG9ydCB0eXBlIFNlbGVjdGFibGVWaWV3ID0geyBzZWxlY3RlZEluZGV4OiBudW1iZXIgfSAmIFZpZXc7XG5cbi8qKlxuICogVGhlIGFjY2Vzc29yIGZvciBzZXR0aW5nIGEgc2VsZWN0ZWRJbmRleCBhbmQgbGlzdGVuaW5nIHRvIGNoYW5nZXMgdGhhdCBpcyB1c2VkIGJ5IHRoZVxuICoge0BsaW5rIE5nTW9kZWx9IGRpcmVjdGl2ZXMuXG4gKlxuICogICMjIyBFeGFtcGxlXG4gKiAgYGBgXG4gKiAgPFNlZ21lbnRlZEJhciBbKG5nTW9kZWwpXT1cIm1vZGVsLnRlc3RcIj5cbiAqICBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOlxuICAgICdTZWdtZW50ZWRCYXJbbmdNb2RlbF0sU2VnbWVudGVkQmFyW2Zvcm1Db250cm9sTmFtZV0sU2VnbWVudGVkQmFyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnc2VnbWVudGVkQmFyW25nTW9kZWxdLHNlZ21lbnRlZEJhcltmb3JtQ29udHJvbE5hbWVdLHNlZ21lbnRlZEJhcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ3NlZ21lbnRlZGJhcltuZ01vZGVsXSxzZWdtZW50ZWRiYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWdtZW50ZWRiYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdzZWdtZW50ZWQtYmFyW25nTW9kZWxdLHNlZ21lbnRlZC1iYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWdtZW50ZWQtYmFyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnTGlzdFBpY2tlcltuZ01vZGVsXSxMaXN0UGlja2VyW2Zvcm1Db250cm9sTmFtZV0sTGlzdFBpY2tlcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ2xpc3RQaWNrZXJbbmdNb2RlbF0sbGlzdFBpY2tlcltmb3JtQ29udHJvbE5hbWVdLGxpc3RQaWNrZXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdsaXN0cGlja2VyW25nTW9kZWxdLGxpc3RwaWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxsaXN0cGlja2VyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnbGlzdC1waWNrZXJbbmdNb2RlbF0sbGlzdC1waWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxsaXN0LXBpY2tlcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ1RhYlZpZXdbbmdNb2RlbF0sVGFiVmlld1tmb3JtQ29udHJvbE5hbWVdLFRhYlZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0YWJWaWV3W25nTW9kZWxdLHRhYlZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0YWJWaWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAndGFidmlld1tuZ01vZGVsXSx0YWJ2aWV3W2Zvcm1Db250cm9sTmFtZV0sdGFidmlld1tmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RhYi12aWV3W25nTW9kZWxdLHRhYi12aWV3W2Zvcm1Db250cm9sTmFtZV0sdGFiLXZpZXdbZm9ybUNvbnRyb2xdJyxcbiAgcHJvdmlkZXJzOiBbU0VMRUNURURfSU5ERVhfVkFMVUVfQUNDRVNTT1JdLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L25vLWhvc3QtbWV0YWRhdGEtcHJvcGVydHlcbiAgaG9zdDoge1xuICAgICcoc2VsZWN0ZWRJbmRleENoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnZhbHVlKScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIFNlbGVjdGVkSW5kZXhWYWx1ZUFjY2Vzc29yIGV4dGVuZHMgQmFzZVZhbHVlQWNjZXNzb3I8U2VsZWN0YWJsZVZpZXc+IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bWF4LWxpbmUtbGVuZ3RoIGRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gIH1cblxuICBwcml2YXRlIHZhbHVlOiBudW1iZXI7XG4gIHByaXZhdGUgdmlld0luaXRpYWxpemVkOiBib29sZWFuO1xuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBzdXBlci5ub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgdGhpcy52YWx1ZSA9IG5vcm1hbGl6ZWQ7XG5cbiAgICBpZiAodGhpcy52aWV3SW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMudmlldy5zZWxlY3RlZEluZGV4ID0gdGhpcy52YWx1ZTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy52aWV3SW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHRoaXMudmlldy5zZWxlY3RlZEluZGV4ID0gdGhpcy52YWx1ZTtcbiAgfVxufVxuIl19