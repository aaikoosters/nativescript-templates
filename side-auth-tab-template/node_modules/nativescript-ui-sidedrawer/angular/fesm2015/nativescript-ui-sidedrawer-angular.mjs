import * as i0 from '@angular/core';
import { EventEmitter, ElementRef, ViewContainerRef, Component, Inject, Output, Input, Directive, NgModule } from '@angular/core';
import { registerElement } from '@nativescript/angular';
import { RadSideDrawer } from 'nativescript-ui-sidedrawer';

const TKDRAWERCONTENT = 'TKDrawerContent';
const TKMAINCONTENT = 'TKMainContent';
/**
 * This is the SideDrawer component. It separates your mobile app's screen
 * into a main part and a menu part whereby the menu part is shown upon a swipe
 * gesture using a transition effect.
 */
class RadSideDrawerComponent {
    constructor(elementRef, viewContainer) {
        this.elementRef = elementRef;
        this.viewContainer = viewContainer;
        this.drawerOpening = new EventEmitter();
        this.drawerOpen = new EventEmitter();
        this.drawerClosing = new EventEmitter();
        this.drawerClosed = new EventEmitter();
        this.sideDrawer = this.elementRef.nativeElement;
    }
    /**
     * [Deprecated: Please use the 'drawerTransition' property instead].
     */
    set transition(transition) {
        this.sideDrawer.drawerTransition = transition;
    }
    get nativeElement() {
        return this.sideDrawer;
    }
    /**
     * Defines either the width or the height
     * of the menu pane depending on the location of the SideDrawer.
     * Top or Bottom - height, Right or Left - width.
     */
    set drawerContentSize(value) {
        this._drawerContentSize = value;
        this.updateContentSize();
    }
    set gesturesEnabled(value) {
        this._gesturesEnabled = value;
        this.updateGesturesEnabled();
    }
    set drawerTransition(value) {
        this._drawerTransition = value;
        this.updateDrawerTransition();
    }
    set drawerLocation(value) {
        this._drawerLocation = value;
        this.updateDrawerLocation();
    }
    updateDrawerLocation() {
        this.sideDrawer.drawerLocation = this._drawerLocation;
    }
    updateDrawerTransition() {
        this.sideDrawer.drawerTransition = this._drawerTransition;
    }
    updateGesturesEnabled() {
        this.sideDrawer.gesturesEnabled = this._gesturesEnabled;
    }
    updateContentSize() {
        this.sideDrawer.drawerContentSize = this._drawerContentSize;
    }
}
RadSideDrawerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: RadSideDrawerComponent, deps: [{ token: ElementRef }, { token: ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
RadSideDrawerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: RadSideDrawerComponent, selector: "RadSideDrawer", inputs: { transition: "transition" }, outputs: { drawerOpening: "drawerOpening", drawerOpen: "drawerOpen", drawerClosing: "drawerClosing", drawerClosed: "drawerClosed" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: RadSideDrawerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'RadSideDrawer',
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef, decorators: [{
                        type: Inject,
                        args: [ElementRef]
                    }] }, { type: i0.ViewContainerRef, decorators: [{
                        type: Inject,
                        args: [ViewContainerRef]
                    }] }];
    }, propDecorators: { drawerOpening: [{
                type: Output
            }], drawerOpen: [{
                type: Output
            }], drawerClosing: [{
                type: Output
            }], drawerClosed: [{
                type: Output
            }], transition: [{
                type: Input
            }] } });
/**
 * Directive identifying the drawer content.
 */
class TKDrawerContentDirective {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._elementRef.nativeElement.id = TKDRAWERCONTENT;
    }
}
TKDrawerContentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKDrawerContentDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TKDrawerContentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKDrawerContentDirective, selector: "[tkDrawerContent]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKDrawerContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkDrawerContent]'
                }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef, decorators: [{
                        type: Inject,
                        args: [ElementRef]
                    }] }];
    } });
/**
 * Directive identifying the main content.
 */
class TKMainContentDirective {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._elementRef.nativeElement.id = TKMAINCONTENT;
    }
}
TKMainContentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKMainContentDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TKMainContentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKMainContentDirective, selector: "[tkMainContent]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKMainContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkMainContent]'
                }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef, decorators: [{
                        type: Inject,
                        args: [ElementRef]
                    }] }];
    } });
let sideDrawerMeta = {
    insertChild: (parent, child) => {
        const drawer = parent;
        const childView = child;
        if (childView.id === TKMAINCONTENT) {
            drawer.mainContent = childView;
        }
        if (childView.id === TKDRAWERCONTENT) {
            drawer.drawerContent = childView;
        }
    },
    removeChild: (parent, child) => {
        const drawer = parent;
        const childView = child;
        if (childView.id === TKMAINCONTENT) {
            drawer.mainContent = null;
        }
        if (childView.id === TKDRAWERCONTENT) {
            drawer.drawerContent = null;
        }
    }
};
/**
 * Directives identifying the RadSideDrawer.
 */
const SIDEDRAWER_DIRECTIVES = [RadSideDrawerComponent, TKDrawerContentDirective, TKMainContentDirective];
registerElement('RadSideDrawer', () => RadSideDrawer, sideDrawerMeta);
/**
 * NgModule containing all of the RadSideDrawer directives.
 */
class NativeScriptUISideDrawerModule {
}
NativeScriptUISideDrawerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NativeScriptUISideDrawerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NativeScriptUISideDrawerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.2", ngImport: i0, type: NativeScriptUISideDrawerModule, declarations: [RadSideDrawerComponent, TKDrawerContentDirective, TKMainContentDirective], exports: [RadSideDrawerComponent, TKDrawerContentDirective, TKMainContentDirective] });
NativeScriptUISideDrawerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NativeScriptUISideDrawerModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NativeScriptUISideDrawerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [SIDEDRAWER_DIRECTIVES],
                    exports: [SIDEDRAWER_DIRECTIVES]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NativeScriptUISideDrawerModule, RadSideDrawerComponent, SIDEDRAWER_DIRECTIVES, TKDrawerContentDirective, TKMainContentDirective };
//# sourceMappingURL=nativescript-ui-sidedrawer-angular.mjs.map
